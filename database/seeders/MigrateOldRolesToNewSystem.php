<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\User;
use App\Models\Role;

class MigrateOldRolesToNewSystem extends Seeder
{
    /**
     * Migration des anciens r√¥les (champ 'role') vers le nouveau syst√®me RBAC
     *
     * Ce seeder synchronise les r√¥les de la colonne legacy 'role' avec
     * le syst√®me RBAC moderne bas√© sur les tables roles, permissions, etc.
     */
    public function run(): void
    {
        $this->command->info('üöÄ D√©but de la migration des r√¥les...');

        // Mapping des anciens r√¥les vers les nouveaux slugs
        $roleMapping = [
            'admin' => 'admin',
            'gestionnaire' => 'gestionnaire',
            // 'client' => null, // Les clients n'ont pas besoin de r√¥les RBAC
        ];

        $migrated = 0;
        $skipped = 0;
        $errors = 0;

        // Parcourir tous les utilisateurs
        foreach (User::whereNotNull('role')->get() as $user) {
            try {
                // V√©rifier si un mapping existe pour ce r√¥le
                if (!isset($roleMapping[$user->role])) {
                    $this->command->warn("‚ö†Ô∏è  Pas de mapping pour le r√¥le '{$user->role}' (utilisateur: {$user->email})");
                    $skipped++;
                    continue;
                }

                $newRoleSlug = $roleMapping[$user->role];

                // R√©cup√©rer le r√¥le RBAC
                $role = Role::where('slug', $newRoleSlug)->first();

                if (!$role) {
                    $this->command->error("‚ùå R√¥le RBAC '{$newRoleSlug}' introuvable pour {$user->email}");
                    $errors++;
                    continue;
                }

                // V√©rifier si l'utilisateur a d√©j√† ce r√¥le
                if ($user->hasRole($newRoleSlug)) {
                    $this->command->info("‚úì {$user->email} a d√©j√† le r√¥le '{$newRoleSlug}'");
                    $skipped++;
                    continue;
                }

                // Attacher le r√¥le
                $user->attachRole($role);
                $this->command->info("‚úÖ R√¥le '{$newRoleSlug}' attach√© √† {$user->email}");
                $migrated++;

            } catch (\Exception $e) {
                $this->command->error("‚ùå Erreur pour {$user->email}: " . $e->getMessage());
                $errors++;
            }
        }

        // R√©sum√©
        $this->command->newLine();
        $this->command->info("üìä R√©sum√© de la migration:");
        $this->command->info("   ‚úÖ Migr√©s: {$migrated}");
        $this->command->info("   ‚è≠Ô∏è  Ignor√©s: {$skipped}");
        $this->command->info("   ‚ùå Erreurs: {$errors}");
        $this->command->newLine();

        if ($errors === 0) {
            $this->command->info('üéâ Migration termin√©e avec succ√®s!');
        } else {
            $this->command->warn("‚ö†Ô∏è  Migration termin√©e avec {$errors} erreur(s)");
        }
    }
}

